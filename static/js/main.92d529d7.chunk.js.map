{"version":3,"sources":["components/row/Row.js","App.js","index.js"],"names":["Row","card","react_default","a","createElement","Card_default","raised","key","id","className","src","concat","url","alt","name","onClick","handleClick","CardContent_default","Typography_default","variant","component","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","shuffle","c","state","cards","i","length","j","Math","floor","random","_ref","setState","toConsumableArray","findId","clicked","find","elem","returnFirstNull","indexOf","insertId","index","map","emptyClicked","Array","fill","resetScoreZero","score","incrementBothScores","topScore","incrementScore","event","target","undefined","alert","guitarists","_this2","Fragment","AppBar_default","position","color","row_Row","assign","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.92d529d7.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from \"@material-ui/core/Typography\";\n\nconst Row = card => (\n    <Card\n        raised={true}\n        key={card.id}\n        className=\"card\"\n    >\n        <img\n            src={`images/${card.url}`}\n            alt={card.name}\n            className=\"card-image\"\n            onClick={card.handleClick}\n            id={card.id}\n        />\n        <CardContent>\n            <Typography variant=\"h6\" component=\"h3\">\n                {card.name}\n            </Typography>\n        </CardContent>\n    </Card>\n)\n\nexport default Row;","import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport \"./app.css\";\nimport guitarists from \"./guitarists.json\";\nimport Row from \"./components/row/Row\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: guitarists,\n      score: 0,\n      topScore: 0,\n      clicked: Array(12).fill(false)\n    };\n  }\n\n  // Fisher-Yates shuffle on cards, update state\n  shuffle = () => {\n    let c = this.state.cards;\n    for (let i = c.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [c[i], c[j]] = [c[j], c[i]];\n    }\n    this.setState({\n      cards: [...c]\n    })\n  }\n  // Check the clicked array for an id\n  findId = id => {\n    return this.state.clicked.find(elem => {\n      return elem === id && true;\n    });\n  }\n  // Return the index of where the first null is found\n  returnFirstNull = () => {\n    return this.state.clicked.indexOf(false);\n  }\n  // Insert id into clicked array\n  insertId = (id, index) => {\n    this.setState({\n      clicked: this.state.clicked.map((elem, i) => {\n      return i === index ? id : elem;\n    })\n    });\n  }\n  // Clear clicked array\n  emptyClicked = () => {\n    this.setState({\n      clicked: Array(12).fill(false)\n    });\n  }\n  // Reset the score\n  resetScoreZero = () => {\n    this.setState({\n      score: 0\n    });\n  }\n  // Increment both the scores (setState is async...)\n  incrementBothScores = () => {\n    this.setState({\n      score: this.state.score + 1,\n      topScore: this.state.topScore + 1\n    });\n  }\n  // increment just the score\n  incrementScore = () => {\n    this.setState({\n      score: this.state.score + 1\n    });\n  }\n  // Main game logic here\n  handleClick = event => {\n    const id = event.target.id;\n    if (this.findId(id) !== undefined) {\n      // It has already been clicked!\n      alert(\"You lose\");\n      // Reset the counters...\n      this.emptyClicked();\n      this.resetScoreZero();\n    }\n    else {\n      // Not already clicked...\n      // Put the id in the clicked array\n      this.insertId(id, this.returnFirstNull());\n      // Is the top score bigger than the score?\n      if (this.state.topScore > this.state.score) {\n        // Update only the score\n        this.incrementScore();\n      }\n      else {\n        // Update both because they're the same\n        this.incrementBothScores();\n      }\n      // Shuffle the array\n      this.shuffle();\n      // Check for win\n      if (this.returnFirstNull() === 11) {\n        // You win! Reset stuff\n        alert(\"You win!\");\n        this.emptyClicked();\n        this.resetScoreZero();\n      }\n    }\n  }\n\n  render() {\n\n    return (\n      <>\n        <AppBar position=\"fixed\" color=\"secondary\">\n          <nav className=\"navbar navbar-default\">\n            <div className=\"container-fluid\">\n              <div className=\"navbar-header\">\n                <Typography variant=\"h4\" color=\"primary\" className=\"navbar-brand\">\n                  Heavy-Metal Memory Game\n                </Typography>\n              </div>\n\n              <ul className=\"nav navbar-nav\">\n                <li>\n                  Score: {this.state.score}\n                </li>\n                <li>\n                  Best: {this.state.topScore}\n                </li>\n              </ul>\n            </div>\n          </nav>\n        </AppBar>\n        <div id=\"main-content\" className=\"container\">\n          <div className=\"row\">\n            {\n              this.state.cards.map((card, i) => (\n                i < 4 && <Row {...card} handleClick={this.handleClick} key={i} />\n              ))\n            }\n          </div>\n          <div className=\"row\">\n            {\n              this.state.cards.map((card, i) => (\n                i > 3 && i < 8 && <Row {...card} handleClick={this.handleClick} key={i} />\n              ))\n            }\n          </div>\n          <div className=\"row\">\n            {\n              this.state.cards.map((card, i) => (\n                i > 7 && <Row {...card} handleClick={this.handleClick} key={i} />\n              ))\n            }\n          </div>\n        </div>\n      </>\n    );\n  }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}